import React, { useState, useEffect } from 'react';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Upload, File, Link, AlertTriangle, ArrowUp, ArrowDown, Shield, Database, Clock, ExternalLink, Check } from 'lucide-react';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('file');
  const [fileUploaded, setFileUploaded] = useState(false);
  const [fileName, setFileName] = useState('');
  const [urlInput, setUrlInput] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [activePeriod, setActivePeriod] = useState('weekly');
  
  const [stats, setStats] = useState({
    filesScanned: 127,
    urlsScanned: 89,
    threatsDetected: 43,
    safeItems: 173
  });
  
  const [systemStatus, setSystemStatus] = useState({
    cpuUsage: 42,
    memoryUsage: 68,
    diskSpace: 23,
    serviceStatus: 'Operational'
  });

  const [recentScans, setRecentScans] = useState([
    { id: 1, type: 'file', name: 'document.pdf', result: 'safe', date: '2025-05-19' },
    { id: 2, type: 'url', name: 'https://example.com', result: 'malicious', date: '2025-05-18' },
    { id: 3, type: 'file', name: 'app.exe', result: 'malicious', date: '2025-05-17' },
    { id: 4, type: 'url', name: 'https://safepage.org', result: 'safe', date: '2025-05-16' },
    { id: 5, type: 'file', name: 'presentation.pptx', result: 'safe', date: '2025-05-15' }
  ]);

  const threatTypeData = [
    { name: 'Trojans', value: 38 },
    { name: 'Ransomware', value: 22 },
    { name: 'Spyware', value: 15 },
    { name: 'Adware', value: 11 },
    { name: 'Worms', value: 9 },
    { name: 'Other', value: 5 }
  ];

  const protectionStatus = {
    realtimeProtection: 'Active',
    databaseUpdate: 'Today, 08:45 AM',
    scheduledScan: 'Tomorrow, 02:00 AM'
  };

  const chartData = {
    weekly: [
      { name: 'Mon', safe: 12, malicious: 3 },
      { name: 'Tue', safe: 19, malicious: 5 },
      { name: 'Wed', safe: 15, malicious: 8 },
      { name: 'Thu', safe: 21, malicious: 7 },
      { name: 'Fri', safe: 18, malicious: 4 },
      { name: 'Sat', safe: 24, malicious: 6 },
      { name: 'Sun', safe: 16, malicious: 10 },
    ],
    monthly: [
      { name: 'Week 1', safe: 87, malicious: 23 },
      { name: 'Week 2', safe: 95, malicious: 28 },
      { name: 'Week 3', safe: 102, malicious: 31 },
      { name: 'Week 4', safe: 91, malicious: 25 },
    ],
    yearly: [
      { name: 'Jan', safe: 320, malicious: 87 },
      { name: 'Feb', safe: 298, malicious: 92 },
      { name: 'Mar', safe: 350, malicious: 103 },
      { name: 'Apr', safe: 410, malicious: 115 },
      { name: 'May', safe: 370, malicious: 98 },
      { name: 'Jun', safe: 380, malicious: 110 },
      { name: 'Jul', safe: 390, malicious: 105 },
      { name: 'Aug', safe: 410, malicious: 120 },
      { name: 'Sep', safe: 430, malicious: 125 },
      { name: 'Oct', safe: 445, malicious: 130 },
      { name: 'Nov', safe: 415, malicious: 122 },
      { name: 'Dec', safe: 400, malicious: 118 },
    ]
  };
  
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setFileUploaded(true);
      setFileName(file.name);
    }
  };
  
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };
  
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFileUploaded(true);
      setFileName(e.dataTransfer.files[0].name);
    }
  };
  
  const handleScan = () => {
    setIsScanning(true);
    
    // Simulate scanning
    setTimeout(() => {
      // Determine scan type and name
      const scanType = activeTab;
      const scanName = scanType === 'file' ? fileName : urlInput;
      
      // Generate random result (more likely to be safe)
      const isMalicious = Math.random() > 0.7;
      const scanResult = isMalicious ? 'malicious' : 'safe';
      
      // Update stats
      setStats(prevStats => ({
        ...prevStats,
        filesScanned: scanType === 'file' ? prevStats.filesScanned + 1 : prevStats.filesScanned,
        urlsScanned: scanType === 'url' ? prevStats.urlsScanned + 1 : prevStats.urlsScanned,
        threatsDetected: scanResult === 'malicious' ? prevStats.threatsDetected + 1 : prevStats.threatsDetected,
        safeItems: scanResult === 'safe' ? prevStats.safeItems + 1 : prevStats.safeItems
      }));
      
      // Add to recent scans
      const currentDate = new Date().toISOString().split('T')[0];
      const newScan = {
        id: Date.now(),
        type: scanType,
        name: scanName,
        result: scanResult,
        date: currentDate
      };
      
      setRecentScans(prevScans => [newScan, ...prevScans.slice(0, 4)]);
      
      // Reset form
      setIsScanning(false);
      setFileUploaded(false);
      setFileName('');
      setUrlInput('');
    }, 2000);
  };
  
  // Main styles to match the exact ScaniFY theme
  const styles = {
    container: {
      backgroundColor: '#0f1923',
      minHeight: '100vh',
      color: '#ffffff',
      fontFamily: 'Arial, sans-serif'
    },
    header: {
      padding: '1rem 2rem',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      borderBottom: '1px solid #1a2a3a'
    },
    logoContainer: {
      display: 'flex',
      alignItems: 'center'
    },
    logo: {
      fontSize: '2rem',
      fontWeight: 'bold',
      marginRight: '1rem',
      color: '#ffffff'
    },
    nav: {
      display: 'flex',
      gap: '2rem'
    },
    navItem: {
      color: '#ffffff',
      textDecoration: 'none',
      fontSize: '1rem'
    },
    actions: {
      display: 'flex',
      gap: '1rem'
    },
    button: {
      backgroundColor: 'transparent',
      border: '2px solid #ffffff',
      borderRadius: '9999px',
      padding: '0.5rem 1.5rem',
      color: '#ffffff',
      fontWeight: 'bold',
      cursor: 'pointer'
    },
    activeButton: {
      backgroundColor: '#06b6d4',
      borderColor: '#06b6d4'
    },
    mainContent: {
      padding: '2rem'
    },
    tabContainer: {
      display: 'flex',
      marginBottom: '2rem',
      backgroundColor: '#162331',
      borderRadius: '8px',
      overflow: 'hidden',
      width: 'fit-content'
    },
    tab: {
      padding: '0.75rem 2rem',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      gap: '0.5rem',
      color: '#a0aec0',
      fontSize: '1rem',
      backgroundColor: '#162331',
      border: 'none'
    },
    activeTab: {
      backgroundColor: '#1d3a55',
      color: '#06b6d4'
    },
    dropArea: {
      border: '2px dashed #1d3a55',
      borderRadius: '8px',
      padding: '3rem',
      textAlign: 'center',
      marginBottom: '1.5rem',
      backgroundColor: '#162331',
      cursor: 'pointer'
    },
    uploadIcon: {
      color: '#06b6d4',
      margin: '0 auto 1rem auto'
    },
    dropText: {
      color: '#a0aec0',
      marginBottom: '0.5rem'
    },
    supportedFormats: {
      color: '#718096',
      fontSize: '0.875rem'
    },
    scanButton: {
      backgroundColor: '#162331',
      color: '#a0aec0',
      padding: '0.75rem',
      borderRadius: '8px',
      width: '100%',
      textAlign: 'center',
      cursor: 'pointer',
      marginBottom: '2rem'
    },
    activeScanButton: {
      backgroundColor: '#06b6d4',
      color: '#ffffff'
    },
    section: {
      backgroundColor: '#162331',
      borderRadius: '8px',
      padding: '1.5rem',
      marginBottom: '2rem'
    },
    sectionTitle: {
      fontSize: '1.5rem',
      marginBottom: '1.5rem',
      color: '#ffffff'
    },
    statContainer: {
      marginBottom: '1.5rem'
    },
    statValue: {
      fontSize: '1.5rem',
      fontWeight: 'bold',
      marginBottom: '0.25rem'
    },
    statLabel: {
      color: '#a0aec0',
      fontSize: '1.25rem',
      marginBottom: '0.5rem'
    },
    statChange: {
      display: 'flex',
      alignItems: 'center',
      fontSize: '0.875rem'
    },
    statChangePositive: {
      color: '#10b981'
    },
    statChangeNegative: {
      color: '#ef4444'
    },
    progressContainer: {
      marginBottom: '1rem'
    },
    progressLabel: {
      display: 'flex',
      justifyContent: 'space-between',
      marginBottom: '0.5rem'
    },
    progressBar: {
      height: '0.5rem',
      backgroundColor: '#1d3a55',
      borderRadius: '9999px',
      overflow: 'hidden'
    },
    progressFill: {
      height: '100%',
      borderRadius: '9999px'
    },
    statusContainer: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    statusLabel: {
      color: '#a0aec0'
    },
    statusValue: {
      color: '#10b981',
      fontWeight: 'bold'
    },
    chartControls: {
      display: 'flex',
      backgroundColor: '#162331',
      borderRadius: '8px',
      overflow: 'hidden',
      width: 'fit-content',
      marginBottom: '1rem'
    },
    chartControl: {
      padding: '0.5rem 1.5rem',
      cursor: 'pointer',
      backgroundColor: '#162331',
      border: 'none',
      color: '#a0aec0'
    },
    activeChartControl: {
      backgroundColor: '#1d3a55',
      color: '#06b6d4'
    },
    chartContainer: {
      backgroundColor: '#162331',
      borderRadius: '8px',
      padding: '1.5rem',
      marginBottom: '2rem',
      height: '300px'
    },
    recentScansContainer: {
      backgroundColor: '#162331',
      borderRadius: '8px',
      padding: '1.5rem',
      marginBottom: '2rem'
    },
    recentScanItem: {
      padding: '0.75rem',
      borderRadius: '4px',
      backgroundColor: '#1d3a55',
      marginBottom: '0.75rem',
      display: 'flex',
      alignItems: 'center'
    },
    scanIcon: {
      marginRight: '0.75rem',
      padding: '0.5rem',
      borderRadius: '50%',
      backgroundColor: 'rgba(6, 182, 212, 0.1)'
    },
    scanDetails: {
      flex: 1
    },
    scanName: {
      fontWeight: 'bold',
      marginBottom: '0.25rem'
    },
    scanDate: {
      fontSize: '0.75rem',
      color: '#a0aec0'
    },
    scanResult: {
      padding: '0.25rem 0.5rem',
      borderRadius: '4px',
      fontSize: '0.75rem',
      textAlign: 'center',
      width: '80px'
    },
    safeBadge: {
      backgroundColor: 'rgba(16, 185, 129, 0.2)',
      color: '#10b981'
    },
    maliciousBadge: {
      backgroundColor: 'rgba(239, 68, 68, 0.2)',
      color: '#ef4444'
    },
    viewAllButton: {
      backgroundColor: 'rgba(6, 182, 212, 0.1)',
      color: '#06b6d4',
      padding: '0.5rem',
      borderRadius: '4px',
      textAlign: 'center',
      cursor: 'pointer',
      width: '100%'
    },
    threatDistribution: {
      backgroundColor: '#162331',
      borderRadius: '8px',
      padding: '1.5rem',
      marginBottom: '2rem'
    },
    threatTypeContainer: {
      marginBottom: '1rem'
    },
    threatTypeRow: {
      display: 'flex',
      justifyContent: 'space-between',
      marginBottom: '0.5rem',
      alignItems: 'center'
    },
    threatTypeName: {
      color: '#a0aec0'
    },
    threatTypeValue: {
      fontWeight: 'bold'
    },
    threatProgressBar: {
      height: '0.5rem',
      backgroundColor: '#1d3a55',
      borderRadius: '9999px',
      overflow: 'hidden',
      marginBottom: '0.75rem'
    },
    protectionStatusContainer: {
      backgroundColor: '#162331',
      borderRadius: '8px',
      padding: '1.5rem',
      marginBottom: '2rem'
    },
    protectionItem: {
      backgroundColor: '#1d3a55',
      borderRadius: '8px',
      padding: '1rem',
      marginBottom: '1rem'
    },
    protectionHeader: {
      display: 'flex',
      alignItems: 'center',
      marginBottom: '1rem'
    },
    protectionIcon: {
      marginRight: '0.75rem',
      padding: '0.5rem',
      borderRadius: '50%',
      backgroundColor: 'rgba(6, 182, 212, 0.1)'
    },
    protectionTitle: {
      fontWeight: 'bold'
    },
    protectionDetail: {
      display: 'flex',
      justifyContent: 'space-between'
    },
    protectionLabel: {
      color: '#a0aec0'
    },
    protectionValue: {
      color: '#10b981'
    },
    grid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(2, 1fr)',
      gap: '1.5rem'
    }
  };

  // Determine the content based on active tab
  const renderContent = () => {
    if (activeTab === 'file' || activeTab === 'url') {
      // Scan Interface
      return (
        <>
          <div style={styles.tabContainer}>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'file' ? styles.activeTab : {})
              }}
              onClick={() => setActiveTab('file')}
            >
              <File size={18} /> File Scan
            </button>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'url' ? styles.activeTab : {})
              }}
              onClick={() => setActiveTab('url')}
            >
              <Link size={18} /> URL Scan
            </button>
          </div>
          
          {activeTab === 'file' && (
            <>
              <div 
                style={styles.dropArea}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                onClick={() => document.getElementById('fileInput').click()}
              >
                <Upload style={styles.uploadIcon} size={48} />
                <p style={styles.dropText}>Drag and drop a file here or click to browse</p>
                <p style={styles.supportedFormats}>Supported formats: EXE, DLL, PDF, DOC, DOCX, XLS, XLSX</p>
                <input 
                  id="fileInput" 
                  type="file" 
                  hidden 
                  onChange={handleFileChange}
                />
              </div>
              
              <button 
                style={{
                  ...styles.scanButton,
                  ...(fileUploaded ? styles.activeScanButton : {})
                }}
                onClick={fileUploaded ? handleScan : undefined}
                disabled={!fileUploaded || isScanning}
              >
                {isScanning ? 'Scanning...' : 'Scan File'}
              </button>
            </>
          )}
          
          {activeTab === 'url' && (
            <>
              <div style={{...styles.section, marginBottom: '1.5rem'}}>
                <input 
                  type="url" 
                  placeholder="Enter URL to scan" 
                  value={urlInput}
                  onChange={(e) => setUrlInput(e.target.value)}
                  style={{
                    width: '100%',
                    padding: '0.75rem',
                    backgroundColor: '#1d3a55',
                    border: 'none',
                    borderRadius: '8px',
                    color: '#ffffff'
                  }}
                />
              </div>
              
              <button 
                style={{
                  ...styles.scanButton,
                  ...(urlInput ? styles.activeScanButton : {})
                }}
                onClick={urlInput ? handleScan : undefined}
                disabled={!urlInput || isScanning}
              >
                {isScanning ? 'Scanning...' : 'Scan URL'}
              </button>
            </>
          )}
          
          <div style={{display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1.5rem'}}>
            <div>
              {/* System Status Section */}
              <div style={styles.section}>
                <h2 style={styles.sectionTitle}>System Status</h2>
                
                <div style={styles.progressContainer}>
                  <div style={styles.progressLabel}>
                    <span style={styles.statusLabel}>CPU Usage</span>
                    <span style={styles.statusLabel}>{systemStatus.cpuUsage}%</span>
                  </div>
                  <div style={styles.progressBar}>
                    <div 
                      style={{
                        ...styles.progressFill,
                        width: `${systemStatus.cpuUsage}%`,
                        backgroundColor: '#06b6d4'
                      }}
                    ></div>
                  </div>
                </div>
                
                <div style={styles.progressContainer}>
                  <div style={styles.progressLabel}>
                    <span style={styles.statusLabel}>Memory Usage</span>
                    <span style={styles.statusLabel}>{systemStatus.memoryUsage}%</span>
                  </div>
                  <div style={styles.progressBar}>
                    <div 
                      style={{
                        ...styles.progressFill,
                        width: `${systemStatus.memoryUsage}%`,
                        backgroundColor: '#06b6d4'
                      }}
                    ></div>
                  </div>
                </div>
                
                <div style={styles.progressContainer}>
                  <div style={styles.progressLabel}>
                    <span style={styles.statusLabel}>Disk Space</span>
                    <span style={styles.statusLabel}>{systemStatus.diskSpace}%</span>
                  </div>
                  <div style={styles.progressBar}>
                    <div 
                      style={{
                        ...styles.progressFill,
                        width: `${systemStatus.diskSpace}%`,
                        backgroundColor: '#06b6d4'
                      }}
                    ></div>
                  </div>
                </div>
                
                <div style={styles.statusContainer}>
                  <span style={styles.statusLabel}>Service Status</span>
                  <span style={styles.statusValue}>{systemStatus.serviceStatus}</span>
                </div>
              </div>
              
              {/* Protection Status */}
              <div style={styles.protectionStatusContainer}>
                <h2 style={styles.sectionTitle}>Protection Status</h2>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Shield size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Real-time Protection</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Status</span>
                    <span style={styles.protectionValue}>{protectionStatus.realtimeProtection}</span>
                  </div>
                </div>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Database size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Database</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Last Update</span>
                    <span style={{color: '#ffffff'}}>{protectionStatus.databaseUpdate}</span>
                  </div>
                </div>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Clock size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Scheduled Scan</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Next Scan</span>
                    <span style={{color: '#ffffff'}}>{protectionStatus.scheduledScan}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div>
              {/* Recent Scans */}
              <div style={styles.recentScansContainer}>
                <h2 style={styles.sectionTitle}>Recent Scans</h2>
                
                {recentScans.map(scan => (
                  <div key={scan.id} style={styles.recentScanItem}>
                    <div style={styles.scanIcon}>
                      {scan.type === 'file' ? (
                        <File size={18} style={{color: '#06b6d4'}} />
                      ) : (
                        <Link size={18} style={{color: '#06b6d4'}} />
                      )}
                    </div>
                    <div style={styles.scanDetails}>
                      <div style={styles.scanName}>{scan.name}</div>
                      <div style={styles.scanDate}>{scan.date}</div>
                    </div>
                    <div 
                      style={{
                        ...styles.scanResult,
                        ...(scan.result === 'safe' ? styles.safeBadge : styles.maliciousBadge)
                      }}
                    >
                      {scan.result}
                    </div>
                  </div>
                ))}
                
                <button style={styles.viewAllButton}>View All Scans</button>
              </div>
              
              {/* Threat Distribution */}
              <div style={styles.threatDistribution}>
                <h2 style={styles.sectionTitle}>Threat Distribution</h2>
                
                {threatTypeData.map(threat => (
                  <div key={threat.name} style={styles.threatTypeContainer}>
                    <div style={styles.threatTypeRow}>
                      <span style={styles.threatTypeName}>{threat.name}</span>
                      <span style={styles.threatTypeValue}>{threat.value}%</span>
                    </div>
                    <div style={styles.threatProgressBar}>
                      <div 
                        style={{
                          ...styles.progressFill,
                          width: `${threat.value}%`,
                          backgroundColor: 
                            threat.name === 'Trojans' ? '#ef4444' :
                            threat.name === 'Ransomware' ? '#f59e0b' :
                            threat.name === 'Spyware' ? '#8b5cf6' :
                            threat.name === 'Adware' ? '#ec4899' :
                            threat.name === 'Worms' ? '#f97316' : 
                            '#06b6d4'
                        }}
                      ></div>
                    </div>
                  </div>
                ))}
                
                <button style={styles.viewAllButton}>Download Report</button>
              </div>
            </div>
          </div>
          
          {/* Detection Trend Section */}
          <div>
            <h2 style={styles.sectionTitle}>Detection Trend</h2>
            
            <div style={styles.chartControls}>
              <button 
                style={{
                  ...styles.chartControl,
                  ...(activePeriod === 'weekly' ? styles.activeChartControl : {})
                }}
                onClick={() => setActivePeriod('weekly')}
              >
                Weekly
              </button>
              <button 
                style={{
                  ...styles.chartControl,
                  ...(activePeriod === 'monthly' ? styles.activeChartControl : {})
                }}
                onClick={() => setActivePeriod('monthly')}
              >
                Monthly
              </button>
              <button 
                style={{
                  ...styles.chartControl,
                  ...(activePeriod === 'yearly' ? styles.activeChartControl : {})
                }}
                onClick={() => setActivePeriod('yearly')}
              >
                Yearly
              </button>
            </div>
            
            <div style={styles.chartContainer}>
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={chartData[activePeriod]}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#1d3a55" />
                  <XAxis dataKey="name" tick={{ fill: '#a0aec0' }} />
                  <YAxis tick={{ fill: '#a0aec0' }} />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: '#162331', 
                      borderColor: '#1d3a55',
                      color: '#ffffff'
                    }}
                  />
                  <Legend />
                  <Line 
                    type="monotone" 
                    dataKey="safe" 
                    name="Safe" 
                    stroke="#10b981" 
                    activeDot={{ r: 8 }} 
                  />
                  <Line 
                    type="monotone" 
                    dataKey="malicious" 
                    name="Malicious" 
                    stroke="#ef4444" 
                    activeDot={{ r: 8 }} 
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
        </>
      );
    } else {
      // Dashboard Interface
      return (
        <>
          <div style={{display: 'flex', gap: '1rem', marginBottom: '1rem'}}>
            <button 
              style={{
                padding: '0.5rem 1.5rem',
                backgroundColor: '#1d3a55',
                color: '#06b6d4',
                border: 'none',
                borderRadius: '4px'
              }}
            >
              Reports
            </button>
            <button 
              style={{
                padding: '0.5rem 1.5rem',
                backgroundColor: '#162331',
                color: '#a0aec0',
                border: 'none',
                borderRadius: '4px'
              }}
            >
              Settings
            </button>
          </div>
          
          <div style={styles.grid}>
            {/* Left Column */}
            <div>
              <div style={styles.statContainer}>
                <div style={{
                  ...styles.statLabel,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <File size={18} style={{color: '#06b6d4'}} />
                  <span>Files Scanned</span>
                </div>
                <div style={{
                  backgroundColor: '#1d3a55',
                  height: '0.5rem',
                  width: '100%',
                  marginBottom: '0.5rem',
                  borderRadius: '2px'
                }}></div>
                <div style={styles.statValue}>{stats.filesScanned}</div>
                <div style={{...styles.statChange, ...styles.statChangePositive}}>
                  <ArrowUp size={14} />
                  <span>+12%</span>
                </div>
              </div>
              
              <div style={styles.statContainer}>
                <div style={{
                  ...styles.statLabel,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Link size={18} style={{color: '#06b6d4'}} />
                  <span>URLs Scanned</span>
                </div>
                <div style={{
                  backgroundColor: '#1d3a55',
                  height: '0.5rem',
                  width: '100%',
                  marginBottom: '0.5rem',
                  borderRadius: '2px'
                }}></div>
                <div style={styles.statValue}>{stats.urlsScanned}</div>
                <div style={{...styles.statChange, ...styles.statChangePositive}}>
                  <ArrowUp size={14} />
                  <span>+8%</span>
                </div>
              </div>
              
              <div style={styles.statContainer}>
                <div style={{
                  ...styles.statLabel,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <AlertTriangle size={18} style={{color: '#ef4444'}} />
                  <span>Threats Detected</span>
                </div>
                <div style={{
                  backgroundColor: '#3d2333',
                  height: '0.5rem',
                  width: '100%',
                  marginBottom: '0.5rem',
                  borderRadius: '2px'
                }}></div>
                <div style={styles.statValue}>{stats.threatsDetected}</div>
                <div style={{...styles.statChange, ...styles.statChangeNegative}}>
                  <ArrowUp size={14} />
                  <span>+15%</span>
                </div>
              </div>
              
              <div style={styles.statContainer}>
                <div style={{
                  ...styles.statLabel,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <Shield size={18} style={{color: '#10b981'}} />
                  <span>Safe Items</span>
                </div>
                <div style={{
                  backgroundColor: '#1d3a55',
                  height: '0.5rem',
                  width: '100%',
                  marginBottom: '0.5rem',
                  borderRadius: '2px'
                }}></div>
                <div style={styles.statValue}>{stats.safeItems}</div>
                <div style={{...styles.statChange, ...styles.statChangePositive}}>
                  <ArrowUp size={14} />
                  <span>+9%</span>
                </div>
              </div>
              
              {/* Recent Scans */}
              <div style={styles.recentScansContainer}>
                <h2 style={styles.sectionTitle}>Recent Scans</h2>
                
                {recentScans.map(scan => (
                  <div key={scan.id} style={styles.recentScanItem}>
                    <div style={styles.scanIcon}>
                      {scan.type === 'file' ? (
                        <File size={18} style={{color: '#06b6d4'}} />
                      ) : (
                        <Link size={18} style={{color: '#06b6d4'}} />
                      )}
                    </div>
                    <div style={styles.scanDetails}>
                      <div style={styles.scanName}>{scan.name}</div>
                      <div style={styles.scanDate}>{scan.date}</div>
                    </div>
                    <div 
                      style={{
                        ...styles.scanResult,
                        ...(scan.result === 'safe' ? styles.safeBadge : styles.maliciousBadge)
                      }}
                    >
                      {scan.result}
                    </div>
                  </div>
                ))}
                
                <button style={styles.viewAllButton}>View All Scans</button>
              </div>
            </div>
            
            {/* Right Column */}
            <div>
              {/* Chart */}
              <div style={styles.chartContainer}>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData.weekly}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#1d3a55" />
                    <XAxis dataKey="name" tick={{ fill: '#a0aec0' }} />
                    <YAxis tick={{ fill: '#a0aec0' }} />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#162331', 
                        borderColor: '#1d3a55',
                        color: '#ffffff'
                      }}
                    />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="safe" 
                      name="Safe" 
                      stroke="#10b981" 
                      activeDot={{ r: 8 }} 
                    />
                    <Line 
                      type="monotone" 
                      dataKey="malicious" 
                      name="Malicious" 
                      stroke="#ef4444" 
                      activeDot={{ r: 8 }} 
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
              
              {/* Threat Distribution */}
              <div style={styles.threatDistribution}>
                <h2 style={styles.sectionTitle}>Threat Distribution</h2>
                
                {threatTypeData.map(threat => (
                  <div key={threat.name} style={styles.threatTypeContainer}>
                    <div style={styles.threatTypeRow}>
                      <span style={styles.threatTypeName}>{threat.name}</span>
                      <span style={styles.threatTypeValue}>{threat.value}%</span>
                    </div>
                    <div style={styles.threatProgressBar}>
                      <div 
                        style={{
                          ...styles.progressFill,
                          width: `${threat.value}%`,
                          backgroundColor: 
                            threat.name === 'Trojans' ? '#ef4444' :
                            threat.name === 'Ransomware' ? '#f59e0b' :
                            threat.name === 'Spyware' ? '#8b5cf6' :
                            threat.name === 'Adware' ? '#ec4899' :
                            threat.name === 'Worms' ? '#f97316' : 
                            '#06b6d4'
                        }}
                      ></div>
                    </div>
                  </div>
                ))}
                
                <button style={styles.viewAllButton}>Download Report</button>
              </div>
              
              {/* Protection Status */}
              <div style={styles.protectionStatusContainer}>
                <h2 style={styles.sectionTitle}>Protection Status</h2>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Shield size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Real-time Protection</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Status</span>
                    <span style={styles.protectionValue}>{protectionStatus.realtimeProtection}</span>
                  </div>
                </div>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Database size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Database</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Last Update</span>
                    <span style={{color: '#ffffff'}}>{protectionStatus.databaseUpdate}</span>
                  </div>
                </div>
                
                <div style={styles.protectionItem}>
                  <div style={styles.protectionHeader}>
                    <div style={styles.protectionIcon}>
                      <Clock size={18} style={{color: '#06b6d4'}} />
                    </div>
                    <div style={styles.protectionTitle}>Scheduled Scan</div>
                  </div>
                  <div style={styles.protectionDetail}>
                    <span style={styles.protectionLabel}>Next Scan</span>
                    <span style={{color: '#ffffff'}}>{protectionStatus.scheduledScan}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </>
      );
    }
  };

  return (
    <div style={styles.container}>
      {/* Header */}
      <header style={styles.header}>
        <div style={styles.logoContainer}>
          <div style={styles.logo}></div>
          {activeTab === 'dashboard' ? (
            <div style={styles.logo}>Dashboard</div>
          ) : (
            <div style={styles.logo}>Scan</div>
          )}
        </div>
        
      
        
        <div style={styles.actions}>
          <button 
            style={{
              ...styles.button,
              ...(activeTab === 'dashboard' ? styles.activeButton : {})
            }}
            onClick={() => setActiveTab('dashboard')}
          >
            DASHBOARD
          </button>
        </div>
      </header>
      
      {/* Main Content */}
      <main style={styles.mainContent}>
        {renderContent()}
      </main>
    </div>
  );
};

export default Dashboard;